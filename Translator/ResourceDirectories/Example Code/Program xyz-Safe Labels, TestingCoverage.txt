@ This Program should utilize all facets of our Emulator as Coverage Tester for EXPECTED Behavior @
@ This Program expects a read in, will need to be set in the test @

@ FIRST Stanza: is a branch and number (without label) @
@ 00 @ br m06;          @ Jump down to the first real instruction @
@ 01 @ readIn: #000f;   @ the number f @
@ 02 @ #0001;           @ This is going to be used to point to the line above. @
@ 03 @ Number1: #1234;
@ 04 @ Number2:
            0x5432;
@ 05 @ Negative1: #-0001;

@ SECOND Stanza: loads direct and indirect from m01, sub = 0, brz to skip a stanza@
@ 06 @ ld m01 r0;
@ 07 @ ldi m02 r1;
@ 08 @ sub r0 r1 r0;
@ 09 @ brz r0 m0d;      @ Branch to FORTH STANZA @

@ THIRD STANZA: Add, write, and branch @
@ 0a @ add r0 r1 r2;
@ 0b @ wr r2;
@ 0c @ brp r2 m10;      @ Branch to Fifth @

@ FORTH STANZA: read in, store, multiply by -1, and branch @
@ 0d @ rd r0;               @ EXPECTING A READ IN, Set During Test @
@ 0e @ st readIn r0;
@ 0f @ ld Negative1 r1;
@ 10 @ mul r0 r1 r0;
@ 11 @ brn r0 m0a;      @ Branch to THIRD STANZA @

@ FIFTH STANZA: load numbers, divide, store indirect, and branch @
@ 12 @ ld Number1 r0;
@ 13 @ ld Number2 r1;
@ 14 @ div r1 r0 r2;
@ 15 @ sti m02 r2;
@ 16 @ br m22;          @ Branch to final @

@ This is all junk just to space out the final stanza and see each value get translated. @
hlt;
#0123;
hlt;
#4567;
hlt;
#89ab;
hlt;
#cdef;
hlt;


@ FINAL STANZA: write 0 (using hlt's value) as a return statement, then halt. @
@ 20 @ ld m22 r0;
@ ?? @ wr r0;
@ ?? @ hlt;