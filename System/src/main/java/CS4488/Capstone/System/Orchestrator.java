/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package CS4488.Capstone.System;



import CS4488.Capstone.Executor.ExecutorFacade;
import CS4488.Capstone.Library.FacadeInterfaces.ExecutorAccess;
import CS4488.Capstone.Library.FacadeInterfaces.NumberConverterAccess;
import CS4488.Capstone.Library.FacadeInterfaces.ProgramStateAccess;
import CS4488.Capstone.Library.FacadeInterfaces.TranslatorAccess;
import CS4488.Capstone.Library.Tools.FileManager;
import CS4488.Capstone.Library.Tools.Hex4digit;
import CS4488.Capstone.Library.Tools.ProgramState;
import CS4488.Capstone.Translator.TranslatorFacade;

import java.io.File;

/**
 * The Back End Facade Class that orchestrates everything else.
 *
 * @version 0.0.9
 * @author Traae
 */
public class Orchestrator implements ProgramStateAccess, TranslatorAccess, ExecutorAccess, NumberConverterAccess {
    // SINGLETON INSTANCE
    private static Orchestrator instance = null;

    // INSTANCE VARIABLES
    ProgramState state;
    TranslatorFacade translator;
    ExecutorFacade executor;
    FileManager fileManager;


    private Orchestrator(){
        state = ProgramState.getInstance();
        //translator = ;
        //executor = ;
        fileManager = FileManager.getInstance();
    }

    public static Orchestrator getInstance() {
        if (instance==null){
            instance = new Orchestrator();
        }
        return instance;
    }

    @Override
    public boolean next() {
        return false;
    }


    @Override
    public ProgramState getProgramState() {
            return ProgramState.getInstance();
    }

    @Override
    public void sendInput(char[] input) {
        state.input.setValue(input);
    }

    @Override
    public char[] getOutput() {
        return state.output.getHexChars();
    }

    @Override
    public boolean translateAndLoad(String path) {
        return false;
    }

    @Override
    public char[] convertToHexChars(Short number) {
        return Hex4digit.decimalToHex(number);
    }

    @Override
    public short convertToShort(char[] number) {
        return Hex4digit.hexToDecimal(number);
    }
}
