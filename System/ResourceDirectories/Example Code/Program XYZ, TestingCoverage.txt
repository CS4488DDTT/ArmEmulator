@ This Program should utilize all facets of our Emulator as Coverage Tester for EXPECTED Behavior @
@ This Program expects a read in, will need to be set in the test @

@ FIRST Stanza: is a branch and number (without label) @
@ 00 @ br m03;          @ Jump down to the first real instruction @
@ 01 @ readIn: #000f;   @ the number f @
@ 02 @ #0100;           @ This is going to be used to point to the line above. @

@ SECOND Stanza: loads direct and indirect from m01, sub = 0, brz to skip a stanza@
@ 03 @ ld m01 r0;
@ 04 @ ldi m02 r1;
@ 05 @ sub r0 r1 r0;
@ 06 @ brz r0 m0a;      @ Branch to FORTH STANZA @

@ THIRD STANZA: Add, write, and branch @
@ 07 @ add r0 r1 r2;
@ 08 @ wr r2;
@ 09 @ brp r2 m10;

@ FORTH STANZA: read in, store, multiply by -1, and branch @
@ 0a @ rd r0;               @ EXPECTING A READ IN, Set During Test @
@ 0c @ st readIn r0;
@ 0d @ ld Negative1 r1;
@ 0e @ mul r0 r1 r0;
@ 0f @ brn r0 m07;      @ Branch to THIRD STANZA @

@ FIFTH STANZA: load numbers, divide, store indirect, and branch @
@ 10 @ ld Number1 r0;
@ 11 @ ld Number2 r1;
@ 12 @ div r1 r0 r2;
@ 13 @ sti m02 r2;
@ 14 @ br m18;          @ Branch to final @

@ DATA STANZA: just variables. @
@ 15 @ Number1: #1234
@ 16 @ Number2:
            #5432
@ 17 @ Negative1: -0x0001

@ FINAL STANZA: write 0 (using hlt's value) as a return statement, then halt. @
@ 18 @ End:
        ld m1a r0;
@ 19 @ wr r0;
@ 1a @ hlt;